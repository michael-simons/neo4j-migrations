#
# Copyright 2020-2022 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

validation-result.outcome.valid = All resolved migrations have been applied to {0}.
validation-result.outcome.incomplete_database = Some versions have been resolved that are not applied to {0}.
validation-result.outcome.incomplete_migrations = Some versions previously applied to {0} cannot be resolved anymore.
validation-result.outcome.different_content = Versions resolved locally mismatch in either names, types or checksums compared to {0}.
validation.database_is_invalid = Database is not in a valid state. To fix this, apply this configuration.
validation.database_needs_repair = Database is not in a valid state and needs manual repair.
lock_failed = Could not ensure uniqueness of __Neo4jMigrationsLock. Please make sure your instance is in a clean state, no more than 1 lock should be there simultaneously!

errors.edition_mismatch = Migration `{0}` uses a constraint that requires Neo4j Enterprise Edition but the database connected to is a {1} edition, you might want to add a guard like `// assume that edition is enterprise` in your script

startup_log = {0} connected to {1}
