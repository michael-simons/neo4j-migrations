/*
 * Copyright 2020-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ac.simons.neo4j.migrations.core.refactorings;

import java.util.Collections;
import java.util.LinkedHashSet;
import java.util.Set;

/**
 * This refactoring adds a surrogate key, either to all nodes matching one or more labels or to all relationships matching
 * a given type. Alternatively, a custom query can be used. The name of the property will default to {@code id} but can be
 * configured.
 * <p>
 * The surrogate key will be generated by the build-in {@code randomUUID} function or optionally, by a user defined function.
 *
 * @author Michael J. Simons
 * @soundtrack Max Herre - MTV Unplugged Kahedi Radio Show
 * @since 1.15.2
 */
public sealed interface AddSurrogateKey extends CustomizableRefactoring<AddSurrogateKey> permits DefaultAddSurrogateKey {

	/**
	 * The default property name to store the surrogate key.
	 */
	String DEFAULT_PROPERTY_NAME = "id";

	/**
	 * The default function to generate surrogate keys.
	 */
	String DEFAULT_KEY_GENERATOR = "randomUUID";

	/**
	 * Provides a refactoring adding a surrogate key to all the nodes that match at least the primary label and optionally
	 * some additional labels.
	 *
	 * @param primaryLabel     The primary label to match
	 * @param additionalLabels The additional or secondary label to match
	 * @return The refactoring ready to use
	 */
	static AddSurrogateKey toNodes(String primaryLabel, String... additionalLabels) {

		if (primaryLabel == null) {
			throw new IllegalArgumentException("At least one label is required");
		}
		Set<String> labels = new LinkedHashSet<>();
		labels.add(primaryLabel);
		Collections.addAll(labels, additionalLabels);

		if (labels.stream().anyMatch(String::isBlank)) {
			throw new IllegalArgumentException("Empty identifiers cannot be used to identify target nodes");
		}

		return new DefaultAddSurrogateKey(DefaultAddSurrogateKey.Target.NODE, labels, DEFAULT_PROPERTY_NAME, DEFAULT_KEY_GENERATOR);
	}

	/**
	 * Provides a refactoring adding a surrogate key to all the relationships that match the given type.
	 *
	 * @param type The type to match
	 * @return The refactoring ready to use
	 */
	static AddSurrogateKey toRelationships(String type) {

		if (type == null || type.isBlank()) {
			throw new IllegalArgumentException("An empty type cannot be used to identify target relationships");
		}

		return new DefaultAddSurrogateKey(DefaultAddSurrogateKey.Target.RELATIONSHIP, Set.of(type), DEFAULT_PROPERTY_NAME, DEFAULT_KEY_GENERATOR);
	}

	/**
	 * Adds a surrogate key to all nodes matching the custom query. The query must return one single variable identifying the nodes.
	 *
	 * @param customQuery The custom query to use
	 * @return The refactoring ready to use
	 */
	static AddSurrogateKey toNodesMatching(String customQuery) {

		if (customQuery == null || customQuery.isBlank()) {
			throw new IllegalArgumentException("The custom query cannot be null or blank");
		}

		return new DefaultAddSurrogateKey(DefaultAddSurrogateKey.Target.NODE, customQuery, DEFAULT_PROPERTY_NAME, DEFAULT_KEY_GENERATOR);
	}

	/**
	 * Adds a surrogate key to all relationships matching the custom query. The query must return one single variable identifying the relationships.
	 *
	 * @param customQuery The custom query to use
	 * @return The refactoring ready to use
	 */
	static AddSurrogateKey toRelationshipsMatching(String customQuery) {

		if (customQuery == null || customQuery.isBlank()) {
			throw new IllegalArgumentException("The custom query cannot be null or blank");
		}

		return new DefaultAddSurrogateKey(DefaultAddSurrogateKey.Target.RELATIONSHIP, customQuery, DEFAULT_PROPERTY_NAME, DEFAULT_KEY_GENERATOR);
	}

	/**
	 * Alters the name of the property that is used for the surrogate key. The default is {@code #DEFAULT_PROPERTY_NAME}.
	 *
	 * @param name The new name of the graph property to store the surrogate key, must not be {@literal null} or blank
	 * @return The refactoring ready to use
	 */
	AddSurrogateKey withProperty(String name);

	/**
	 * Alters the generator function to be used. The function must be either a build-in stored procedure or any user defined
	 * function returning a single value supported as storable property. The default is {@link #DEFAULT_KEY_GENERATOR}.
	 * <p>
	 * The function can be given in the form {@code foobar} in which we will add opening and closing braces or as {@code foobar(%s)}
	 * {@code %s} will be replaced by the name of the variable pointing to the entity being processed
	 * </p>
	 *
	 * @param name The new name of the generator function to use
	 * @return The refactoring ready to use
	 */
	AddSurrogateKey withGeneratorFunction(String name);
}
