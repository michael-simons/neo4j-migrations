/*
 * Copyright 2020-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ac.simons.neo4j.migrations.core.catalog;

import ac.simons.neo4j.migrations.core.internal.Strings;

import java.nio.charset.StandardCharsets;
import java.util.Collection;

/**
 * The unique id of an {@link CatalogItem item}.
 *
 * @author Michael J. Simons
 * @since 1.7.0
 */
public sealed interface Name permits AbstractName {

	/**
	 * Turns a name value into a {@link Name}. The value might be {@literal null}
	 *
	 * @param value The value of the name
	 * @return A name
	 */
	static Name of(String value) {
		return value == null ? DefaultName.EMPTY : new DefaultName(value);
	}

	/**
	 * Generates a name for the given combination of attributes in case a {@link CatalogItem} has no database intrinsic name
	 *
	 * @param classType        Class of the item
	 * @param itemType         Type (constraint or index)
	 * @param targetEntityType Node or relationship
	 * @param identifier       The identifier as defined with the constrained or generated by the database
	 * @param properties       The set of properties
	 * @param options          The options to this object
	 * @return a generated name
	 */
	static Name generate(Class<?> classType, ItemType itemType, TargetEntityType targetEntityType, String identifier,
		Collection<String> properties, String options) {

		String src = String.format("{type=%s, targetEntity=%s, identifier='%s', properties='%s'%s}", itemType,
			targetEntityType, identifier, String.join(",", properties),
			options == null ? "" : ", options='" + options + '\'');

		String value = String.format("%s_%s",
			classType.getSimpleName(),
			Strings.MD5.andThen(Strings.BASE64_ENCODING).apply(src.getBytes(StandardCharsets.UTF_8))
		);

		return new GeneratedName(value);
	}

	/**
	 * {@return the {@link String string representation} of this instance}
	 */
	String getValue();
}
